// How does js works lets Understand, open your mind;


// better do it in browser

Javacript excecution context

{} = code file
First thing to be made is (global excecution context);
Second thing to be made is (function excecution context);
Third thing to be made is (eval excecution context); better used in mongoose;

browser and node is different but here browser one is important

Phases

Memory creation Phase;
or 
Creation Phase

difference = In Memory creation phase only place for variable or declared has been alocated place for storage

Excecution Phase


To declare value (HOW)


Example of the same by code file below;

{
let val1 = 10
let val2 = 5
function addNum(num1, num2){
    let total = num1 + num2
    return total
}
let result1 = addNum(val1, val2)
let result2 = addNum(10, 2)
}

How the code is executed

steps

1. first GEC (global environment)
2. Memory Phase ( all variables are collected and then stored ) steps below

first steps
val1 = undefined
val2 = undefined

addNum = defination of the function (what needs to be done)

result1 = undefined
result2 = undefined

the first cycle is completed

3. Execution Phase (now executed)

val1 = 10
val2 = 5

(nothing in addNum as defination is already defined)

result1 = addNum calls for its own executional context
It creates a new variable environment and a execution thread
now both memory and execution phase will be created

memory phase
val1 = undefined
val2 = undefined
total = undefined

execution phase
num1 = 10
num2 = 5
total = 15
now total is returned to (GLC)
after the whole process the box is now deleted

now line 8

result2 = addNum calls for its own executional context
It creates a new variable environment and a execution thread
now both memory and execution phase will be created

memory phase
val1 = undefined
val2 = undefined
total = undefined

execution phase
10 is assigned to val1
2 is assigned to val2
total = 12
now total is returned to (GEC)
after the whole process the box is now deleted






// CALSTACKS (Down towards up as it is a stck)

one came executed and removed, same with 2 and 3

GEC 


// complexity

is when while executing one we called and 2 and 3

now the looks are
3
2
1
GEC

LIFO(Last In First Out)


